services:
  postgres:
    build:
      context: ..
      dockerfile: deployments/postgres/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT_INCREMENTED}:${POSTGRES_PORT}"
    volumes:
      - internet-shop-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT_INCREMENTED}:${REDIS_PORT}"
    volumes:
      - internet-shop-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  init-postgres:
    image: postgres:13-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /migrations/ddl.sql
      psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /migrations/dml.sql
      "
    volumes:
      - ../migrations:/migrations
    
  authorization:
    build:
      context: ..
      dockerfile: deployments/python/Dockerfile
      args:
        PORT: ${AUTHORIZATION_PORT}
        NAME: authorization
    ports:
      - "${AUTHORIZATION_PORT}:${AUTHORIZATION_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  
  gateway:
    build:
      context: ..
      dockerfile: deployments/python/Dockerfile
      args:
        PORT: ${GATEWAY_PORT}
        NAME: gateway
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - authorization
    
volumes:
  internet-shop-data:
  internet-shop-redis-data: